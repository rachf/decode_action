/*!
不限制账号版 卡密需购买
卡密变量 km
ck变量 ksck
格式:  ck#salt#代理
多号&分割
代理格式:  ip|端口|账号|密码

 */

(function() {
    'use strict';
    
    // 青龙面板环境检测
    if (typeof require === 'undefined' || typeof process === 'undefined' || typeof Buffer === 'undefined') {
        return;
    }
    
    // 保存原始上下文
    var _require = require;
    var _process = process;
    var _Buffer = Buffer;
    var _console = console;
    var _global = global;
    
    // 加密数据存储
    var _data = [
        '',
        'TkhGbE5IRzBoc3BsamJ0bE5IRmxOSEZsTk1PcWgyOXhpclp0WHFTVVluNWJEQ09lRVhtbmcyVzVQWHA3SG5GbE5IRmxOTTBsRDJLMEQybGxqYnRsTkhGbE5IRmxOTU9xaDI5eGlyWnREcjlwalhwN0huRmxOSEZsTk0wUE5IRmxOTTB1VGJ0bE5NMHVUYnU5SGx0YVFkSXJ5RGF0dzVDcHo2VXNwTmd0YTU3dWxPd3JsUGhQRENTNWdyUmxFc0F6RDNXdWcyNGxpTEFlaUtHZGczbTVWMjl6Z3JBb2lMcTJmQ1c1UE1HZGczbTVBQ094UUhHcEVDU29ocnFiaUxxYWduRjlOSFFwejZVc3BOZ3RhNTd1bE93cmxQa3J0NElyeUR4blBYRzdIbkZsZkJEbFBIS2Jocjk0akFBZGdIcGxqYnRsTkhGbGhyQTBpQ096Tk14UE5IRmxOSEZsZzJ4Nk5NV2RpQlp4SG5GbE5IRmxOTDFlRWV0bE56UGhtWElyc1B3dW1EM3NhZjdwejZVc3BOZ2FhTm9zcjdZdGE1N3J2UE1xYU4vYWFOcG5RRnRsTkhGbE5IR3VoSXRsTnJjYUQyS3hmTDllaUhOUE5IRmxOTTA3SG5GbGtWdGxORnRsTkxTYWdzUzBOTU9xaDNBeGlIRjlOTEszREJxME5NU3FncldYRUNLMUVDUzBQTXhQTkhGbE5MMXFpTG1hRUl0bE5waUtBSE54SG5GbE5IRzFocmI2TkhPdGlNV2JoZXRhUTJxYmZCNXJnZDV1Z2Q5dmgyOXpObmJQTkhGbE5MbXFEQldxaHNSNk5NeFBOSEZsTkhGbE5xQWVFQ055VkJpcWdzVm5UbkZuWk1PYWpNcVpFQ1MwRUNOYVJYNGJObHRsTkhGbGtYYlBOSEZsTk1XdWdCQWFpQ1Y2TklsYlJJRlBOSEc5UUhHYmhyOTRqQUFkZ0hibEVMQWVEM091aE1XdWcyNGxQZEZuTlRQTHBuR3VoTHF6RXI4emZCOG5QWXhQTkhGUE5IR3VFbkZ0TkNPcWgzQXhpSHBsamJ0bE5IRmxockEwaUNPek5NeFBOSEZsTkhGbGcyeDZOTEVtZ01TcVFGdGxOSEZsTkhHeWgyaDZOSFFuc0RibDV1amw1d1RBNkRIZjZRK001UXpvNTVITDZQNi82RWp6TkxxYmZCNXJnZDV1Z2ROeEhuRmxOSEZsTkxxYlRuRm5ObHRsTkhGbGtZeFBOSEc5SG5GbEhuRmxEMjl6aDNWbGZDRmxVWEdkRUNTMWdNVnpmQ0Zsa01ibGhyQWVpQmMwUXJxYkMyS3BFTU9xaDNSbGtNYmxObk43SG5GbGhyQTBpQ096Tk14UE5IRmxOTDl3VG5HMGhzQXFRRnRsTkhGbGdDU3NUbkZuNHVkS05LU1VWMHlZU2pYN3QralZtemZ5dCtCNHpUKzhvVEJNenpCVXQwcVZUbkZuTkh4bFBMcWJOTWM4TkhRcnNQd3NzNlpuUFhiUE5IRmxOTHFiVG5HdWhIRzhrSEZuNXVkdjU1K3FObHRsTk0wN0hzMFBIclNhZ3NTME5NQWVFQldWaHI5NGZCQWVOSTBsZ3JBM05LU3FpSGx1VGJ0UFFkOGw2TjYzNUQrQjZRWHI1RCszNUUrNjV1ZHg1USttNXRMYUhyS2VqQjVvTkxFMWdyUzBmQjl6TkxpcWlKS29EMjkxZ3NXSERDU3VEMHF6RXI4dEQyOWFmMnFxUUhHYmhyOTRqQUFkZ0hibERCU29nM0F6aUpxcE5JMGxObzhuUFhHN0huRmxEMjl6aDNWbGlDT3hOSTBsTnJtMGlNR2VUbjhhZ3JBbmlCY21RcnkxREJxZWZMOTFRclNhZ1g5ZEVDUzBRMjRhZ3JBbmlCY21RMktvaUxxMmZDVzVRMkFtaHI0YWczRXFoc0V1RUNoYURyS2VmQlNPZ3JFYVUzU2FpQ09vRVkxbmczVzBnMjFrRTNBdUVMQWtFcnFkaDNWblRidGxORnRsTkxTYWdzUzBOTU9xaDNBeGlIRjlOTEszREJxME5NU3FncldYRUNLMUVDUzBQTXhQTkhGbE5MMXFpTG1hRUl0bE5waUtBSE54SG5GbE5IRzFocmI2Tk1BZGdIYlBOSEZsTkxtcURCV3Foc1I2Tk14UE5IRmxOSEZsTnBtYWgzVm5UbkZuZ3JBbmlCY21RcnkxREJxZWZMOTFRclNhZ1hOeEhuRmxOSEZsTkhPQWgyQWRRWktzRUI1ME5vdGxOcnkzREJweURCNXBocjl1RUhHbUVCaWFnbjhlUW9aMlFvRm5RRnRsTkhGbE5IRm5WMjlhZjJxcU5vdGxEMjlhZjJxcVFGdGxOSEZsTkhGblYyOXppTEF6aUgxWmpDR3FOb3RsTnJLYmhMY3VEMkswZkI5elEzbHlpM2kzUUJFYWhyMHlpQ094RUI1b2cyV3FFSE5QTkhGbE5NMHhIbkZsTkhHMGZCMXFnM0EwVG5GY1JvRmJSRnRsTk0weE5NR2RnM201QUNPeFFIRm42UVhyNUQrM0JkTmxQZEdtRDJTYWlCNTBYQlZsUGRGbkNYSXRvd2txbzVncXM3d3JzUGVwYTZNcmxmOG5QWXhQTkhGUE5IR3VFbkZ0aHJBZWlCYzBOSERyTk1PcWgzQXhpSDVkRUNTMWdNVmxVWTA5TklKbE9uRGxockFlaUJjMFFyV21pTEp1Tk14UE5IRmxOTU9xaU1BZGduRzdIbkZsTkhGbE5MNXVEMnl6REIxcVRuR2RFQ1MxZ01WekVMSzBEWDUxaDJBZFdMSzBEWTh6Z3Jxb2YyNW1nQlpsa01ibGdzQXhnSGJQTkhGbE5IRmxpTDkwREJjSWcycXpUbkdkRUNTMWdNVnpFTEswRFg1MGczV21nSlNhZkI0bFVlOGxnc0F4Z0hiUE5IRmxOSEZsREJjeFYyS2VmSXRsaHJBZWlCYzBRcldtaUxKekRCY3hWMktlZkhGL1VkR3ppQmN4SG5GbE5IRzlUYnRsTk0wUE5IRlBOSEdkRUNXMWhyNGxnc0F4Z0l4UGtWdFBRZDhsNXVmTTV1ZHg1Z0xLNVFueTVmKzU2ZzJWSHJFMWdyUzBmQjl6TkxTcWdzV3FocEt4ZkJpelBNV3FqTVZ4Tk1pdUVNV3RQWEc3SG5GbGlMQTRpSEY5TktTMGhycXpFZG0wRUNtMFBZeFBOSEd1RW5GdGlMQTRpSDV4RUI1c2lMbGxVbzBsaTJxcGlMbHVOTXhQTkhGbE5NT3FpTUFkZ25HMEVDbTBRc1MxRHNTMGhycXpFZGxiUUhHM2ZCVzBmSHA3SG5GbGtWdGxORnRsTkxTYWdzUzBOTUdtRUxXdWdyaGxVWEczZkJXMGZIRnlOTVdxak1WemdMQXpFM1d0VGJ0bE5MU2Fnc1MwTkxjcUVzV1ZEQldwZkI1c05JMGxZQkswZkg1cmdMOWFobm1iREJXcGZCNXNOSDhsUm5wN0huRmxEMjl6aDNWbGhycXNmTVdWREJXcGZCNXNOSTBsaExLcEVMcXpFZEZ5TkxjcUVzV1ZEQldwZkI1c1RidGxORnRsTk1PcWlNQWRnbkZuTkhOemhyQWJFQkswUExjcUVzV1ZEQldwZkI1c1BYRndOTVdxak1WbFBkRm5OSE56aHJBYkVCSzBQTU91RTJtMFpMS3BFTHF6RWRwN0hzMFBIbjhhTlRCL3YrZk9uK0I1YStCV256WDd6K0JQdGpqY3pidW9nTEtlaGRHUWlCS3VoMm1haVpLcEFMS2VmZEc3SG5GbEQyOXpoM1dkaUJTMGczTnRqZEd1Z3JXcWpIYmxoMkt4aUhibEQyOWFmMnFxUUhHemZCU3dnckt5RVhGOU5ITm5RSEdiaHI5NGpBQWRnSEY5Tkw1MWdMYmxrWHBsamJ0bE5IRmxpTG11aGQ1dWdyV3FqSEY5TkxxekVMQTRUYnRsTkhGbGlMbXVoZDVlREJjME5JMGxoMkt4aUl4UE5IRmxOTVd0ZkNSekQyOWFmMnFxTkkwbEQyOWFmMnFxVGJ0bE5IRmxpTG11aGQ1emZCU3dnckt5RVhGOU5MNXVEMnl6REIxcU5NYzhOSFF0eVBncW83aG5OSHhsZkI1cEVDbDdIbkZsTkhHMGZMcWVRc0dkZzNtNUFDT3hOSTBsaE1PYWpNcUFocmI3SG5GbE5IRzBmTHFlUXJTYWZCNVJmQjF1aUhGOU5JWmJSSUZiUkl4UE5IRmxOTVd0ZkNSekQyOXVncEE0RDJBcUVMQXBOSTBsRXJLeGgyWjdIbkZsTkhGUE5IRmxOTVd0ZkNSekVDbTBocktvaUpTYWcyeXVFWnF6RXI4dFBZeFBOSEZsTkZ0bE5IRmxpTG11aGQ1dEVCS3BFQ09lTkkwbGpidGxOSEZsTkhGblhMOWVpSE42TkhPekVCTzFnTEp6ZjNBbWZDU3RnM1p6RDI5eU5uYlBOSEZsTkhGbE5wU2FncjVxRDNXdWcyNG5UbkZuZjJBcWhIMW1nTHEyRVhOeEhuRmxOSEZsTkhPQWgyQWRRWktzRUI1ME5vdGxOcDFhanJxeGdMSmFTWDRiTkhtUmZCNTFqSXhsVkI1cGhyOXVFSEZjUkl4bFlacGxUSEdSZkNXcU5KTzFmQmNwUTFLUVpZSnpSWXBiVFlKYlFvRmJSb3hsaTNEdU5KS2JoTGNxQTJBblgycTBRZVplU2Q0ZVNuRnRYMG1aWVpieE5MY3VmMlpsVzJBb2YyOHVOS0VxaHNTdWcyNGFTSDRiTkpTdGhyOXlFWDg0U2Q0YlFvVmRUSUZ6UllGY05KMWFEcnF4RVhHWURCRW1ocnBhU1lSM1FvUjJObmJQTkhGbE5IRmxOcFNhZzJ5dUVYTjZOTVd0ZkNSekQyOWFmMnFxUUZ0bE5IRmxOSEZuRDI5emlMQXppSDEwakNHcU5vdGxOcktiaExjdUQySzBmQjl6UTJ1ZWcyNG5IbkZsTkhHOVRidGxOSEZsSG5GbE5IRzBmTHFlUXNXbWgyeVhFQ0dhaHNXVkRDV3ROSTBsTm45ZEVDUzBRM05hREJWYWlMS2VmZDlkRUNHYWhzVm5UYnRsTkhGbGlMbXVoZDVlaUxLZGlLV3VnQlpsVVhHSkRDV3FRcjVhaWRsdVRidGxOSEZsaUxtdWhkNXFncldaZkIxcU5JMGxpTG11aGQ1ZWlMS2RpS1d1Z0JabFFYRmVSSUZiUkl4UE5IRmxOTVd0ZkNSemhDQXFoc3FWRENPbWdDUmxVWEZuZ0I5cFVBbXVEQjl5ZlhtU1hYRmNSWHByRENHYmlyQWRVWE5sUGRHMGZMcWVRcktiaE1FcWhuRndOSE5yRUJpdUVJMG5OSHhsaUxtdWhkNXFFMnFwTkh4bE5uRXBmQlY5Tm5Gd05NV3RmQ1J6RUxxcFRidGxOSEZsSG5GbE5IRmFRZElwejdhcW52TXVtRDNzYWY0UE5IRmxOTVd0ZkNSemlMS2VmMFNhZ3JFdUUzUmxVWEc3SG5GbE5IRmxOTE9hakl0bGpidGxOSEZsTkhGbE5MNW1nQlo2TkhRcXd1M3N3d01xemcvcXBEdG5RRnRsTkhGbE5IRmxOTE8xaDJxekVDU2VYQlY2TklEYlNuYlBOSEZsTkhGbE5IR2JnM1NPRUl0bFJvRmVTSUR4SG5GbE5IRmxOSEZsaDNBblpMS3NFWnFwVG5GY1JJRmJSb1ZiU29WeEhuRmxOSEZsTkhGbGhyQWNpQkFlaUtTb0VCNXFBTXFiRVl0bFJYYlBOSEZsTkhGbE5IRzBEQ1N3QU1xYkVZdGxSVnRsTkhGbE5IRzlRRnRsTkhGbE5IR3hnMjl3VG5HN0huRmxOSEZsTkhGbGdyS3lFWXRsTnpqaG4rQjVhK0JXbnpCK3Erck1wakI0bFhOeEhuRmxOSEZsTkhGbERzQWVmQjVxaDNTT0VJdGxTb2hkUUZ0bE5IRmxOSEZsTk1HYWgwcXBUbkZkU0lGMlNkYlBOSEZsTkhGbE5IR2VpQk9WREJpcVhCVjZOSUpiUklGZFNvUjJTZGJQTkhGbE5IRmxOSEdkRUNLMUVDUzBaMlNxZ3JBWmpDR3FUbkZjUUZ0bE5IRmxOSEZsTk1XbWgyeVpqQ0dxVG5GY0huRmxOSEZsTk0weEhuRmxOSEZsTkxFYWcyVjZOTXhQTkhGbE5IRmxOSEd6REIxcVRuRm42ZkJ5NlBMcTVnci81RUxQTm5iUE5IRmxOSEZsTkhHbmlDU3VnckFlaDBxcFRuRjVSZURkUUZ0bE5IRmxOSEZsTk1HYWgwcXBUbkZkU0lGMlNkYlBOSEZsTkhGbE5IR2VpQk9WREJpcVhCVjZOSUpiUklGZFNvUjJTZGJQTkhGbE5IRmxOSEdkRUNLMUVDUzBaMlNxZ3JBWmpDR3FUbkYzUUZ0bE5IRmxOSEZsTk1XbWgyeVpqQ0dxVG5GZEhuRmxOSEZsTk0wUE5IRmxOTTA3SG5GbE5IRlBOSEZsTkg4YU5UWDd6K0JQdGpqN3Mrbnp0VnRsTkhGbGlMbXVoZDUwRENTd1ozV21pTVJsVVhHN2tZeFBOSEZsTko5bmZyQW9pSDV3RUNxZVBNV3RmQ1J6aUxLZWYwU2FnckV1RTNSdVFyRWFocEFtRDJsdGlMS2VmMHlxalhGOVVuRzdIbkZsTkhGbE5NV3RmQ1J6aUxLZWYxUzBEQ1dlQjNXbWgyeVFFQ3FpTkkwbGpidGxOSEZsTkhGbE5NUzFEMlNxaDNSNk5JRnhIbkZsTkhGbE5IRmxFckt1Z0xBcFRuRmJRRnRsTkhGbE5IRmxOTVdhaUxLeFpyQTNEQ09wVG5GYkhuRmxOSEZsTk0wN0huRmxOSEc5UFl4UE5IRmxORnRsTkhGbGlMbXVoZDV4ZzNpWEVDaW1ocldZaU1PcURCeGxVWEZiVGJ0bE5IRmxpTG11aGQ1eGczaVhFQ2ltaHJXWmZNT3FoMm1hZ0xWbFVYRmNSSXhQTkhGbE5NV3RmQ1J6Z0w5M1pyQTNEQ09wWUxxeWZDVmxVWEZlVGJ0bE5IRmxpTG11aGQ1ZWlMOWJWQmN4QUxLZWYzUmxVWEdyREJjZUVZeFBOSEZsTkZ0bE5IRmxpTG11aGQ1MERDU3dZTHF5ZkNXWEVCS29mTEFwTkkwbGozMDdIbkZsTkhHVURydXFEM1Z6ZjJBNWhkbTBmTHFlUXNXbWgyeUlnMjVyZkJpZVBYNXJnM09LREJTdFBNV21oMnlRRUNwbFVZNGxqYnRsTkhGbE5IRzBmTHFlUXNXbWgyeVJmQjF1aUtPcURCU3RFQldnaUxLZWYweXFqQTBsVVhHckRCY2VFWXhQTkhGbE5NMHVUYnRsTk0wUE5IRlBOSEZhUWRJcnQ0SXJzNkN1bTVNcXpOTXVyRUlxblFEUE5IR21oM3F6RGRHb2ZMQW9mMFNhZkI1UmZCMXVpSGx1Tk14UE5IRmxOTVdkalhHN0huRmxOSEZsTkxTYWdzUzBOTEtvRDI5MWdzV09nckVhTkkwbERDaW1mQ1ZsRTJBMFZCU29nM0F6aUpPbWgycW9YQjVyZ2RtMGZMcWVRclNhZzJ5dUVYYmxpTG11aGQ1YmhyOTRqQUFkZ0hibGlMbXVoZDV1Z3JXcWpIcDdIbkZsTkhGbE5McXJOSG1tRDJTYWlCNTBYQjVyZ2RGck9uR21EMlNhaUI1MFhCNXJnZDUwZzNXbWdKU2FmQjR1Tk14UE5IRmxOSEZsTkhHb2cyNWVpSEdvaUNPZEVCNTBWMjl1Z25GOU5NR21oc1NxWEI1MFBMS29EMjkxZ3NXT2dyRWFRc1dhaUxLeFYyOXVnbnA3SG5GbE5IRmxOSEZsZkJEbFBMUzFoc09xZ3NXSWcycXpOSTQ5Tk1XdGZDUnpEMjl1Z3BjdWdCcTBQWEc3SG5GbE5IRmxOSEZsTkhHa0MwY1VXMTlrUEhRbnJ2SWF6TjhsNlFYcjVEKzNCZE5s',
        '',
        '',
        '',
        '',
        '',
        '',
        'aDJtSWZMS3pFMlp6aUw5TGZDbXFFSGxkUFl4UE5IRmxOTFdtaUxLWGczaGxQZTBsRDJBemlMQWRWQmN1RTI0dEQyS2VmSlN0REI1c0VBUzBobmJsaTJxcGlMbWVCZWlpUFhGd05ITzhOb3hQTkhGbE5GdGxOSEZsQzE5UlkwaWtDZG1wRENXbVpyOTNQWXhQTkhHOVBZeFBOSEZQTkhHa0MwY1VXMTlrUEhOOU5uNWRFQ0dxRENWdFRJRnVQWXhQTkhHa0MwY1VXMTlrUEhPOE5uRndOTFNxZ3NXcWhwS3hmQml6UEhObE5IRmxOSElwejdhcW52TXJuZmt0dERlcXd0ZXJuT0lhYU5ldHc3a3JzNkNzc05hdHc2Z3N6NGdzejVVcnN1YmxOSEZsTkhGblFIRjNUSHBsUGRGbmtITnVUYnRsTks5a1lKOU1DMTh0Tm8wblFzT3FoTEFtaUhsNFJIcHVUYnU5SGx0YVFkSXB6UWFxbTczcnFnRlBQTEtlakI1b05IbHVOSTArTk14UE5IR29nMjVlaUhHbUQyU2FpQjUwaGRGOU5MY2FEQldHRDJTYWlCNTBoMEVkZzIxS2dzRHRQWXhQTkhHa0MwY1VXMTlrUEhRcW1nTXJuZzdxblFGbE5uRndOTEtvRDI5MWdzV2VRcmNxZ3JpMGZIRndOSE5sNVFudjV1ZE81dUJONlFYcjVEKzNObnA3SG5GbEhuRmxmQkRsUEhLbUQyU2FpQjUwaGQ1eEVCNXNpTGx1Tk14UE5IRmxOTUdkZzJTcWgzUnpFQ211aUhsY1BZeFBOSEc5SG5GbEhuRmxEMjl6aDNWbGdCSzRWMjl6RDNBZGhyQXpEM3BsVVhHYkRDT2VFWnF6aUhta0MwQVRBcTlrUXAxR0JLOUlZMDVJQUFPWFdaNUlCWEc4a0hHa0MwQVRBcTlrUXBTVVlwU0FacU9LWXBTRU5NYzhOSE40VElsblFIRmNSSHBsa01ibFRJbDRUYnRsTkxTYWdzUzBOTDFtaktPYWlCNXBoZEY5Tk1HbWhzU3FYQjUwUEs5a1daNUJDMTh6WnA5QVlwV1lOTWM4TkhOZVNYTnhOSUpiUFhHOGtIRmVTWXhQTkhGUE5IR2tDMGNVVzE5a1BIT2hnenJEeHpyN3BqQjV5ekJVcGorOHJuTmxQZEd5RENtSWcyNW9pQ09kRUI1b2pYRndOSE5sTkhGbDZFbmQ2Z3pXNlEyejV1QmI3N2RmTm5Gd05MMW1qS09haUI1cGhkRndOSE9oZ25OdVRidGxORnRsTkxTYWdzUzBOTU9xaDNBeGlNUmxVWEdnQ1l4UE5IRlBOSEdtaTJLdWlIR29nMjVvaUNPZEVCNTBXQ21xRDNBMEVYbW1EMlNhaUI1MGhkYmxnQks0VjI5ekQzQWRockF6RDNweE5MS2VqQjVvTkhtbUQyU2FpQjUwUFhGOVVuRzdIbkZsTkhHa0MwY1VXMTlrUEhPaGd6UEZxVFBGcUhJYnM1dkZOVEI4bFRCc24rbjB1ekJVeTF4bk5IeGxEQlNvZzNBemlINXVncldxakhGd05IT2lObkZ3TkhtbUQyU2FpQjUwUXNPcWdCS2RmZEYvTkhRYWFObG5OSHhsREJTb2czQXppSDVkRUIxbWhyeGxQZEZuNzdkT05uRjZOSE5uUFhGd05ITmw0dEhaNHRIWk5ucDdIbkZsTkhGUE5IRmxOTVdkalhHN0huRmxOSEZsTkxTYWdzUzBOTU9xaDNBeGlIRjlOTEszREJxME5NR2RnMlNxaDNTR0QyU2FpQjUwUExLb0QyOTFnc1Z4TkwxbWpLT2FpQjVwaGRwN0huRmxOSEZsTk1PcWgzQXhpTVJ6aE1BZWZIbTdIbkZsTkhGbE5IRmxmQjVwRUNsNk5MS29EMjkxZ3NWemZCNXBFQ2x4SG5GbE5IRmxOSEZsaHJBeURDT3dUbkdtRDJTYWlCNTBRc09xZ0JLZGZkRzhrSEZuNXVqbDVmWE01d1R0Tm5iUE5IRmxOSEZsTkhHemZCU3dnckt5RVl0bGhyQWVpQmMwVWQ1emZCU3dnckt5RVhHOGtIRzBmTHFlUXI1dUQyeXpEQjFxUUZ0bE5IRmxOSEZsTkxxemZDV3VEQmNJZzJxelRuR2RFQ1MxZ01WL1FycXpmQ1d1REJjSWcycXpOTWM4TklGeEhuRmxOSEZsTkhGbEVycXpEQmNJZzJxelRuR2RFQ1MxZ01WL1FyRXVnckt4VjI5dWduRzhrSEZiUUZ0bE5IRmxOSEZsTkxTYWZCNUlmTEt6RTJaNk5NT3FoM0F4aUk4ekQyOXVncFN0REI1c0VYRzhrSEZiUUZ0bE5IRmxOSEZsTkxxemZDV3VEQmNJRENTdFRuR2RFQ1MxZ01WL1FycXpmQ1d1REJjSURDU3ROTWM4TklGeEhuRmxOSEZsTkhGbEVycXpEQmNJRENTdFRuR2RFQ1MxZ01WL1FyRXVnckt4VjJLZWZIRzhrSEZiUUZ0bE5IRmxOSEZsTkxTbWgybUlmTEt6RTJaNk5NT3FoM0F4aUk4ekQyS2VmSlN0REI1c0VYRzhrSEZiUUZ0bE5IRmxOSEZsTk1TMERDV2VUbkdkRUNTMWdNVi9Rc1MwRENXZU5NYzhOTXk5UUZ0bE5IRmxOSEZsTkxTYWZCNVJmQjF1aUpBNEQyQXFFTEFwVG5HZEVDUzFnTVYvUXJTYWZCNVJmQjF1aUpBNEQyQXFFTEFwTk1jOE5MRW1nTVNxSG5GbE5IRmxOTTB1VGJ0bE5IRmxrWEdvRENXb2ZIRnRFQ09kZzNOdU5NeFBOSEZsTkhGbEMxOVJZMGlrQ2RsbjZRWHI1RCszQmRObFBkR21EMlNhaUI1MFFycXpFTEE0Tkh4bE5xMGw0dTJSTlRmT3Urbm1vVEI4bHpCNHpUKzhybk5sUGRHcWhzT2FobjV5RUNTZURCaXFQWXhQTkhGbE5IRmxockFlaUJjMGhkNWJpQ1N0UE14UE5IRmxOSEZsTkhHdWdyV3FqSXRsREJTb2czQXppSDV1Z3JXcWpIYlBOSEZsTkhGbE5IR2RFQjFtaHJ4Nk5MS29EMjkxZ3NWemhyQXlEQ093Tk1jOE5IUXJxNklxdU5rcng2bG5RRnRsTkhGbE5IRmxOTDV1RDJ5ekRCMXFUbkcwZkxxZVFyNXVEMnl6REIxcVFGdGxOSEZsTkhGbE5McXpmQ1d1REJjSWcycXpUbkZiUUZ0bE5IRmxOSEZsTkxFdWdyS3hWMjl1Z290bFJIYlBOSEZsTkhGbE5IR29nMnF6VjJtbWdyaXFUbkZiUUZ0bE5IRmxOSEZsTkxxemZDV3VEQmNJRENTdFRuRmJRRnRsTkhGbE5IRmxOTEV1Z3JLeFYyS2VmSXRsUkhiUE5IRmxOSEZsTkhHb0RDU3RWMm1tZ3JpcVRuRmJRRnRsTkhGbE5IRmxOTEFkaHI5ZFRuR3Foc09haG41eUVDU2VEQmlxSG5GbE5IRmxOTTB1VGJ0bE5IRmxrVnRsTk0wdVRidGxORnRsTk1PcWgzQXhpTVJ6aDI5ZGlIbHREWGJsRG5wbFVZNGxEWDV1Z3JXcWpIRnlOTE56ZkI1cEVDbHVUYnRsTkZ0bE5LOWtZSjlNQzE4dE5xY3o1REJ0NkRUdDVmNlI1dG5WNDRISE5uYmxOelBobVhOdVRidGxOSzlrWUo5TUMxOHROcWN6UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVhJdHlQZ3FvN2twYTZNcmxmL3J4RGtybFF4bFFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYMHlRWDB5UVgweVFYTnVUYnRsTkZ0bE5NR2RmQjUwVkJTb2czQXppTVNZaUIxeURDTzVQTU9xaDNBeGlNUnVUYnU5UFhsdVRidD0='
    ];
    
    // 数据重组
    var _combined = _data.join('');
    
    // 多层解码函数
    function _decode(_input) {
        try {
            // 第一层：Base64解码
            var _step1 = _Buffer.from(_input, 'base64').toString();
            
            // 第二层：Caesar密码解码（位移-5）
            var _step2 = _step1.replace(/[A-Za-z]/g, function(char) {
                var start = char <= 'Z' ? 65 : 97;
                return String.fromCharCode((char.charCodeAt(0) - start - 5 + 26) % 26 + start);
            });
            
            // 第三层：Base64解码
            var _step3 = _Buffer.from(_step2, 'base64').toString();
            
            // 第四层：字符替换还原
            var _final = _step3
                .replace(/__LOG__/g, 'console.log')
                .replace(/__ENV__/g, 'process.env')
                .replace(/__REQ__\(/g, 'require(');
            
            return _final;
        } catch (_error) {
            return null;
        }
    }
    
    // 安全执行函数
    function _execute() {
        var _code = _decode(_combined);
        if (_code) {
            try {
                // 创建安全的执行环境
                var _wrapper = '(function(require, process, Buffer, console, global, __dirname, __filename, module, exports) {\n' + 
                             _code + 
                             '\n})';
                
                // 使用eval执行（青龙面板兼容）
                var _func = eval(_wrapper);
                _func(_require, _process, _Buffer, _console, _global, __dirname, __filename, module, exports);
                
            } catch (_execError) {
                // 静默处理执行错误
            }
        }
    }
    
    // 延迟执行（给青龙面板足够的初始化时间）
    setTimeout(_execute, 300);
    
})();
